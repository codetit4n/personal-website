[{"content":"","date":"26 Feb 2025","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":" Description # In low-level programming, this method is widely used to ensure that data is properly aligned in memory. This is important because some architectures require that data be aligned to certain boundaries in memory to avoid performance penalties or even crashes.\ntypedef intptr_t word_t; // word size - e.g., 8 bytes on 64-bit systems size_t align(size_t n) { return (n + sizeof(word_t) - 1) \u0026amp; ~(sizeof(word_t) - 1); } This function returns the nearest multiple of the word size that is greater than or equal to n. This is efficient because it avoids the need for expensive division/modulus operations.\nExample: Assuming x64 architecture, where word size is 8:\nalign(3) returns 8 align(8) returns 8 align(9) returns 16 align(16) returns 16 Breakdown # Step 1: Add the alignment offset n + sizeof(word_t) - 1 This ensures rounding up if n is not already a multiple of the word size (i.e., not aligned).\nStep 2: Mask out the lower bits \u0026amp; ~(sizeof(word_t) - 1) This clears out the lower bits to ensure the result is a multiple of the word size(sizeof(word_t)).\nExample # n = 13, sizeof(word_t) = 8\n13 + 8 - 1 = 20 (binary: 0001 0100) - Step 1 Applying \u0026amp; ~(8 - 1) - Step 2 0001 0100 (20) \u0026amp; 1111 1000 (mask) ----------- 0001 0000 (16) Result: align(13) = 16 ","date":"26 Feb 2025","externalUrl":null,"permalink":"/notes/computer-systems/memory-alignment/","section":"Notes","summary":"","title":"An efficient memory alignment function","type":"notes"},{"content":" Collection of notes on computer systems. üñ•Ô∏è\n","date":"26 Feb 2025","externalUrl":null,"permalink":"/notes/computer-systems/","section":"Notes","summary":"","title":"Computer Systems","type":"notes"},{"content":"Collection of notes on various topics. üìö\n","date":"26 Feb 2025","externalUrl":null,"permalink":"/notes/","section":"Notes","summary":"","title":"Notes","type":"notes"},{"content":" Collection of some coding hacks. üë®‚Äçüíª\n","date":"27 Nov 2024","externalUrl":null,"permalink":"/notes/coding-hacks/","section":"Notes","summary":"","title":"Coding Hacks","type":"notes"},{"content":" Description # You can swap two numbers without using a temporary variable using bitwise XOR:\nExample in C:\nint a = 12; int b = 6; a = a ^ b; /* a = 12 ^ 6 = 14 */ b = a ^ b; /* b = 14 ^ 6 = 12 */ a = a ^ b; /* a = 14 ^ 12 = 6 */ /* a is now 6 and b is now 12 */ Something to Remember # While it was once considered a clever trick, modern compilers and processors often optimize standard swap operations effectively, making the XOR swap less advantageous in practice.\nThis can be useful in embedded systems where memory is limited, and you want to save a few bytes.\nReferences # Wikipedia: XOR swap algorithm ","date":"27 Nov 2024","externalUrl":null,"permalink":"/notes/coding-hacks/xor-swap/","section":"Notes","summary":"","title":"Swap two Numbers Without Using a Temporary Variable","type":"notes"},{"content":" GCD explained to a 5-year-old # Imagine you have two piles of LEGO bricks. One pile has 12 bricks, and the other has 18 bricks. You want to divide both piles into smaller groups so that: All the groups have the same number of bricks. Each group is as big as possible. The GCD (Greatest Common Divisor) is the largest number of bricks you can put in each group without leaving any leftover bricks. Example:\nFor 12 and 18: You can divide 12 into groups of 1, 2, 3, 4, 6, or 12 bricks. You can divide 18 into groups of 1, 2, 3, 6, 9, or 18 bricks. The largest group size that works for both is 6. So, the GCD of 12 and 18 is 6. Why is GCD useful?\nWhy Do We Need GCD? Sharing Things Fairly: Suppose two kids want to share their LEGO piles equally with the biggest possible group size. GCD helps figure out how to divide fairly. GCD in Programming and Math # GCD is used in solving problems about patterns, grids, and even how machines work together. For example: Making schedules: If one bus comes every 12 minutes and another every 18 minutes, GCD helps find when both buses will come at the same time. Think of GCD as a way to make things simple and organized! Simplifying Fractions: If you have a fraction like 18/12, you can simplify it to 3/2 by dividing the numerator (18) and denominator (12) by their GCD (6). ","date":"24 Nov 2024","externalUrl":null,"permalink":"/notes/math/gcd/","section":"Notes","summary":"","title":"What and Why of GCD","type":"notes"},{"content":" Description # You can store an entire date in a single integer using a shift hack:\nExample in C:\nunsigned int d = 12;\t/* 12 in binary is 0b1100. */ unsigned int m = 6; /* 6 in binary is 0b110. */ unsigned int y = 1983; /* 1983 in binary is 0b11110111111. */ unsigned int date = (((y \u0026lt;\u0026lt; 4) + m) \u0026lt;\u0026lt; 5) + d; /* Add 0b11110111111000000000 and 0b11000000 and 0b1100. Sum is 0b11110111111011001100. */ /* 32 in binary is 0b100000. */ /* Remainder dividing by 32 gives lowest 5 bits, 0b1100. */ d = date % 32; /* Shifting 5 bits right discards the day, leaving 0b111101111110110. Remainder dividing by 16 gives lowest remaining 4 bits, 0b110. */ m = (date \u0026gt;\u0026gt; 5) % 16; /* Shifting 9 bits right discards day and month, leaving 0b111101111110. */ y = date \u0026gt;\u0026gt; 9; References # GNU C Manual ","date":"23 Jun 2024","externalUrl":null,"permalink":"/notes/coding-hacks/date-hack/","section":"Notes","summary":"","title":"Date in a Single Integer","type":"notes"},{"content":" Description # So, there is this notion (specially in parallel programming world) that all we have to do is keep adding processors to the problem and its going to get faster no matter what, which is incorrect. Amdahl\u0026rsquo;s Law is how we quantify that.\nUse Amdahl\u0026rsquo;s Law when you want to speed up part of the program or only some instructions.\nFormulla # \\( S = \\frac{1}{(1 - P) + \\frac{P}{N}} \\)\nwhere:\n\\( S \\) is the overall speedup. \\( P \\) is the fraction of the program that we enhanced. \\( N \\) is speedup of the enhanced part. Note: \\( P \\) is the % of original execution time that is affected by the enhancement.\nReferences # https://www.youtube.com/watch?v=WdRiZEwBhsM ","date":"8 Jun 2024","externalUrl":null,"permalink":"/notes/computer-systems/amdahls/","section":"Notes","summary":"","title":"Amdahl's Law","type":"notes"},{"content":"Welcome to my blog! Happy reading! üéâ\n","date":"6 Jun 2024","externalUrl":null,"permalink":"/blog/","section":"Blog","summary":"","title":"Blog","type":"blog"},{"content":"","date":"5 Jun 2024","externalUrl":null,"permalink":"/tags/experience/","section":"Tags","summary":"","title":"Experience","type":"tags"},{"content":"","date":"5 Jun 2024","externalUrl":null,"permalink":"/tags/lua/","section":"Tags","summary":"","title":"Lua","type":"tags"},{"content":"In this article I will be talking about my experience with vim.\nNOTE: This is not a tutorial for vim.\nVSCode is good # This might come as a bit of a surprise to some people because, more often than not, people who advocate for vim don\u0026rsquo;t have good things to say about VSCode. But I think VSCode is an amazing tool, especially for beginner programmers.\nImagine you are a new programmer and know nothing about code editors, auto-completion, LSPs, or plugins. At this point, your priority is not to learn about vim motions, LSPs, etc. You just want to hit the ground running and start writing some code. VSCode is a very good tool for that. You just install it, add a few plugins, and start coding - no overhead.\nVim is just better # Vim is what you use when you want to customize your coding experience. Let\u0026rsquo;s break it down:\nVim motions # Let\u0026rsquo;s face it, coding can get pretty tedious. Vim keeps it fun. Moving around your editor without ever touching the mouse feels pretty awesome. This is what makes vim so incredible to use. If you don\u0026rsquo;t ever want to use vim, I would still suggest you try Vim motions. You can even use them in VSCode. Just try it for fun. I bet you\u0026rsquo;ll like it.\nCustomization # In Vim, you can customize everything, and I mean everything. Now, I get that there are customizations available for VSCode as well, but vim can do so much more. You can opt out of features that you do not like, which is not possible in VSCode. Just pick what you like and remove all the bloat. Personally, I don\u0026rsquo;t like the virtual text that is shown beside the code when you have an error. So, I can easily change this behaviour using a few lines of code.\nIf you want to add or change keymaps for various functionality, you can do that very easily.\nIf there is a new language or a language that you created and there are no dev tools (like LSPs, formatters, etc.) available on the VSCode marketplace, there is little to nothing you can do about it. In Vim, if you or some third party have created some tools for the language, you can easily integrate them into the editor. You can even add new filetypes in vim. It\u0026rsquo;s pretty cool.\nMy Vim configuration # I use a newer version of Vim called Neovim. You can customize it using this amazing language called Lua. It\u0026rsquo;s easy to learn, pretty powerful, and totally awesome. Now, I am not going to ramble on about how I configured my vim; that is not the goal of this article. You can check out my latest configuration here: https://github.com/codetit4n/nvim-config\nConclusions # I am still learning vim, and I am not an expert by any means. I will try to update this article as I learn more about vim. But I can say this: Working with Vim makes you feel like a coding ninja. Just try it!\n","date":"5 Jun 2024","externalUrl":null,"permalink":"/blog/vim-experience/","section":"Blog","summary":"","title":"My vim experience","type":"blog"},{"content":"","date":"5 Jun 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"5 Jun 2024","externalUrl":null,"permalink":"/tags/vim/nvim/","section":"Tags","summary":"","title":"Vim/Nvim","type":"tags"},{"content":"","date":"5 Jun 2024","externalUrl":null,"permalink":"/tags/vscode/","section":"Tags","summary":"","title":"Vscode","type":"tags"},{"content":"","date":"24 May 2024","externalUrl":null,"permalink":"/tags/blockchain/","section":"Tags","summary":"","title":"Blockchain","type":"tags"},{"content":"","date":"24 May 2024","externalUrl":null,"permalink":"/tags/legacy/","section":"Tags","summary":"","title":"Legacy","type":"tags"},{"content":"These are some of the blog posts I wrote a while back. You can check them out here.\nDate Article Link 1 Mar 2023 The Slice Type in Rust 28 Feb 2023 References and Borrowing in Rust 22 Feb 2023 Understand Ownership in Rust 17 Feb 2023 Mastering Rust Fundamentals: Statements, Expressions, Control Flow, and Repetition 14 Feb 2023 Rust concepts: Compound Types, Scopes, Shadowing, and Functions 10 Feb 2023 Make a strong Rust Foundation - Data Types, Variables, Mutability, and Constants 7 Feb 2023 Cargo Basics 6 Feb 2023 Getting started with Rust development 28 Jan 2023 Rust: Talk to the Ethereum Blockchain ","date":"24 May 2024","externalUrl":null,"permalink":"/blog/legacy/","section":"Blog","summary":"","title":"Legacy Blog","type":"blog"},{"content":"","date":"24 May 2024","externalUrl":null,"permalink":"/tags/rust/","section":"Tags","summary":"","title":"Rust","type":"tags"},{"content":"","date":"24 May 2024","externalUrl":null,"permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"Tutorial","type":"tags"},{"content":"Namaste üôè , I‚Äôm Lokesh\nA Software Engineer based in Chandigarh, India üáÆüá≥ currently focusing on Blockchain and other decentralized tech. I am always looking to learn and expand my skill set.\nI created this website to document my journey and share some insights with the world.\n","date":"7 Apr 2024","externalUrl":null,"permalink":"/about/","section":"","summary":"","title":"About","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]